---
title: "JONR_20231219_GSEA_VBCS-1091"
author: "Bobby Fillinger"
date: "`r Sys.Date()`"
output: html_document
---

```{r Load in libraries, collapse = TRUE}

# install.packages("tidyverse")
# install.packages("readxl")
# BiocManager::install("fgsea")

# library(tidyverse)
library(org.Mm.eg.db) # Mouse database from AnnotationDB
library(readxl)
library(clusterProfiler)
library(fgsea)
library(ggplot2)

```

```{r Load data, collapse = TRUE}

c0 = as.data.frame(read_excel("cluster0ALvsDR.xlsx"))
c2 = as.data.frame(read_excel("cluster2ALvsDR.xlsx"))
c3 = as.data.frame(read_excel("cluster3ALvsDR.xlsx"))

```
```{r Map to entrez and ENSEMBL GeneIDs and prepare list}

c0$entrez  = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=c0$Gene, column="ENTREZID", keytype="SYMBOL", multiVals="first")))
c0$ensembl = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=c0$Gene, column="ENSEMBL",  keytype="SYMBOL", multiVals="first")))
c0 = c0[!is.na(c0$entrez),]
c0 = c0[order(c0$avg_diff, decreasing = TRUE),]
c0_list = c0$avg_diff
names(c0_list) = c0$entrez

# c0_list


c2$entrez  = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=c2$Gene, column="ENTREZID", keytype="SYMBOL", multiVals="first")))
c2$ensembl = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=c2$Gene, column="ENSEMBL",  keytype="SYMBOL", multiVals="first")))
c2 = c2[!is.na(c2$entrez),]
c2 = c2[order(c2$avg_diff, decreasing = TRUE),]
c2_list = c2$avg_diff
names(c2_list) = c2$entrez

# c2_list


c3$entrez  = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=c3$Gene, column="ENTREZID", keytype="SYMBOL", multiVals="first")))
c3$ensembl = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=c3$Gene, column="ENSEMBL",  keytype="SYMBOL", multiVals="first")))
c3 = c3[!is.na(c3$entrez),]
c3 = c3[order(c3$avg_diff, decreasing = TRUE),]
c3_list = c3$avg_diff
names(c3_list) = c3$entrez

# c3_list

```

```{r GSEA, collapse = TRUE}

c0_GSEA = gseGO(geneList = c0_list, 
                      OrgDb = org.Mm.eg.db,
                      minGSSize = 1,
                      maxGSSize = 1000,
                      pvalueCutoff = 0.1)

c2_GSEA = gseGO(geneList = c2_list, 
                      OrgDb = org.Mm.eg.db,
                      minGSSize = 1,
                      maxGSSize = 1000,
                      pvalueCutoff = 0.1)

c3_GSEA = gseGO(geneList = c3_list, 
                      OrgDb = org.Mm.eg.db,
                      minGSSize = 1,
                      maxGSSize = 1000,
                      pvalueCutoff = 0.1)

write.table(as.data.frame(c0_GSEA), file = "c0_GSEA.csv", row.names = FALSE, col.names = TRUE, sep = ",")
write.table(as.data.frame(c2_GSEA), file = "c2_GSEA.csv", row.names = FALSE, col.names = TRUE, sep = ",")
write.table(as.data.frame(c3_GSEA), file = "c3_GSEA.csv", row.names = FALSE, col.names = TRUE, sep = ",")

```
```{r GSEA plots, collapse = TRUE}

# Data types required to use with fgsea package:
typeof(examplePathways)
typeof(exampleRanks)

pathways_df = read.csv("/varidata/research/projects/bbc/bobby/JONR_20231219_GSEA_VBCS-1091/VBCS-1091_GSEA_Modules.csv")

ncol(pathways_df) # 11 columns (data is in the last 3)
pathways_list = as.list(pathways_df[,9:11])

remove_nas_from_list = function(list){
  for (i in 1:length(list)){
    list[[i]] = list[[i]][!is.na(list[[i]])]
  }
  return(list)
}

pathways_list = remove_nas_from_list(pathways_list)

pathways_list

fgseaRes = fgsea(pathways = pathways_list,
                 stats    = c0_list, 
                 minSize  = 1,
                 maxSize  = 1000)

head(fgseaRes[order(pval),])

gsea_plot1 = plotEnrichment(pathways_list[["cell.cycle"]], c0_list) + labs(title = "Cell Cycle")
ggsave("cell_cycle_GSEA.png")

gsea_plot2 = plotEnrichment(pathways_list[["mitotic.cell.cycle"]], c0_list) + labs(title = "Mitotic Cell Cycle")
ggsave("mitotic_cell_cycle_GSEA.png")

gsea_plot3 = plotEnrichment(pathways_list[["cell.division"]], c0_list) + labs(title = "Cell Division")
ggsave("cell_division_GSEA.png")

```

```{r GO analysis, collapse = TRUE}

# iterate through the 3 ontologies (cellular component, biological process, or molecular function)
for (ontology in c("CC", "BP", "MF")){
  
  for (number in c(1,2,3)) {
    
    if (number == 1) {
      things = c0$ensembl
      thing_name = paste0("c0_GO_", ontology, ".csv")
    } else if (number == 2) {
      things = c2$ensembl
      thing_name = paste0("c2_GO_", ontology, ".csv")
    } else {
      things = c3$ensembl
      thing_name = paste0("c3_GO_", ontology, ".csv")
    }
    
     ego_df <- as.data.frame(enrichGO( gene          = things,
                                       OrgDb         = org.Mm.eg.db,
                                       keyType       = 'ENSEMBL',
                                       ont           = ontology,
                                       pAdjustMethod = "BH",
                                       pvalueCutoff  = 0.05,
                                       qvalueCutoff  = 0.1))
       
      write.csv(ego_df, thing_name)
      
  }
  
}
  
```


