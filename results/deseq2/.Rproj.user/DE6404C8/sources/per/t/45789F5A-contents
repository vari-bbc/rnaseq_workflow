---
title: "VBCS-1297"
author: "Bobby Fillinger"
date: "`r Sys.Date()`"
output: html_document
---

```{r Loadin' the 'braries}

suppressPackageStartupMessages({
  
  library(dplyr)
  library(stringr)
  library(ggplot2)
  library(readr)
  library(ggrepel)
  library(ComplexHeatmap)
  library(DESeq2)
  library(org.Mm.eg.db)
  library(forcats)
  library(clusterProfiler)
  
})

```

```{r}

remove_low_counts = function(dds, cutoff = 10){
  
  keep <- rowSums(counts(dds)) >= cutoff
  dds <- dds[keep, ]
  return(dds)
  
}

```


```{r}

se = readRDS("SummarizedExperiment.rds")

rownames(se) = gsub("\\.[0-9]*$", "", rownames(se)) # Replace numbers in ENSEMBL names with blank spaces

colData(se)

se_reste = se[ ,se$cellType %in% "reste"]
se_cd4   = se[ ,se$cellType %in% "CD4"]

colData(se_reste)
colData(se_cd4)

de_reste = DESeqDataSet(se_reste, design = ~ group + batch + sex)
de_cd4   = DESeqDataSet(se_cd4,   design = ~ group + batch + sex)
de       = DESeqDataSet(se,       design = ~ group + batch + sex)

de_reste = remove_low_counts(de_reste)
de_cd4   = remove_low_counts(de_cd4)
de       = remove_low_counts(de)

plotPCA( vst(de_reste), intgroup = "group" )
plotPCA( vst(de_cd4),   intgroup = "group" )
# plotPCA( vst(de),       intgroup = "group" )

plotPCA( vst(de_reste), intgroup = "sex" )
plotPCA( vst(de_cd4),   intgroup = "sex" )
# plotPCA( vst(de),       intgroup = "sex" )

plotPCA( vst(de_reste), intgroup = "batch" )
plotPCA( vst(de_cd4),   intgroup = "batch" )
# plotPCA( vst(de),       intgroup = "batch" )



```

```{r}

dds_reste = DESeq(de_reste)
dds_cd4   = DESeq(de_cd4)
dds       = DESeq(de)

```

```{r DE analysis}

res_reste <- results(dds_reste, contrast=c("group", "MC", "MR"), alpha=0.1 )
res_cd4   <- results(dds_cd4,   contrast=c("group", "MC", "MR"), alpha=0.1 )

res_reste = res_reste[!is.na(res_reste$padj),]
res_cd4   = res_cd4[!is.na(res_cd4$padj),]

reste_readcounts = counts(dds_reste, normalized = TRUE)[rownames(res_reste),]
cd4_readcounts   = counts(dds_cd4, normalized = TRUE)[ rownames(res_cd4),]

reste_readcounts = reste_readcounts[order(rownames(res_reste)),]
cd4_readcounts   = cd4_readcounts[order(rownames(res_cd4)),]

res_reste = res_reste[order(rownames(res_reste)),]
res_cd4   = res_cd4[order(rownames(res_cd4)),]

# rownames(res_reste) == rownames(reste_readcounts)
# rownames(res_cd4) == rownames(cd4_readcounts)
# 
# nrow(cd4_readcounts) == nrow(res_cd4)
# nrow(res_reste) == nrow(reste_readcounts)

res_reste_out = cbind(res_reste, reste_readcounts)
res_cd4_out   = cbind(res_cd4,   cd4_readcounts)

res_reste_out = res_reste_out[order(res_reste_out$padj),]
res_cd4_out   = res_cd4_out[order(res_cd4_out$padj),]

res_reste_out$alias = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=rownames(res_reste_out), column="SYMBOL", keytype="ENSEMBL", multiVals="first")))
res_cd4_out$alias   = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=rownames(res_cd4_out), column="SYMBOL", keytype="ENSEMBL", multiVals="first")))

res_reste_out = res_reste_out[,c(ncol(res_reste_out),1,seq(2,ncol(res_reste_out)-1))]
res_cd4_out = res_cd4_out[,c(ncol(res_cd4_out),1,seq(2,ncol(res_cd4_out)-1))]

write.csv(res_reste_out, file = "reste_MR_v_MC_DEA.csv")
write.csv(res_cd4_out, file = "cd4_MR_v_MC_DEA.csv")

```

```{r GO}

reste_GO_genes = rownames(res_reste[res_reste$padj <= 0.05,])
cd4_GO_genes   = rownames(res_cd4[res_cd4$padj < 0.05,])

reste_GO <- enrichGO(gene       = reste_GO_genes,
                    OrgDb         = org.Mm.eg.db,
                    keyType       = 'ENSEMBL',
                    ont           = "ALL",
                    pAdjustMethod = "BH",
                    pvalueCutoff  = 0.01,
                    qvalueCutoff  = 0.05, 
                    readable = TRUE)

cd4_GO <- enrichGO(gene       = cd4_GO_genes,
                    OrgDb         = org.Mm.eg.db,
                    keyType       = 'ENSEMBL',
                    ont           = "ALL",
                    pAdjustMethod = "BH",
                    pvalueCutoff  = 0.01,
                    qvalueCutoff  = 0.05, 
                    readable = TRUE)

write.csv( reste_GO, file = "reste_MR_v_MC_GO.csv")
write.csv( cd4_GO, file = "cd4_MR_v_MC_GO.csv")

```

```{r GSEA}

GSEA_funk = function(res, database, pval_cutoff = 0.1, minGSSize = 1, maxGSSize = 1000 ){
  
  alt_rownames = gsub("\\.[0-9]*$", "", rownames(res))
  alt_res = res
  rownames(alt_res) = alt_rownames
    
  res$entrez = unname(unlist(AnnotationDbi::mapIds(database, keys=rownames(alt_res), column="ENTREZID", keytype="ENSEMBL", multiVals="first")))

  res = res[!is.na(res$entrez),]
  res = res[order(res$log2FoldChange, decreasing = TRUE),]
  res_list = res$log2FoldChange
  names(res_list) = res$entrez
  
  res_GSEA = as.data.frame(gseGO(geneList = res_list,
                   OrgDb = database,
                   minGSSize = minGSSize,
                   maxGSSize = maxGSSize,
                   pvalueCutoff = pval_cutoff))
  
  res_GSEA$genes = unname(unlist(lapply( res_GSEA$core_enrichment, FUN = function(x){
  			if (x != ""){
  				# print(x)
  				entrez_ids = as.vector(unname(unlist(strsplit(x, "/"))))
  				alias_names = unname(unlist(
  					AnnotationDbi::mapIds(
  							org.Mm.eg.db, 
  							keys=entrez_ids, 
  							column="SYMBOL", 
  							keytype="ENTREZID", 
  							multiVals="first")))
  				z = paste0(alias_names, collapse = "/")
  			} else {
  				z = NA
  			}
  			return(z)
    
  })))
  		
  return(res_GSEA)

}

reste_GSEA = GSEA_funk(res_reste, org.Mm.eg.db)
cd4_GSEA   = GSEA_funk(res_cd4,   org.Mm.eg.db)

write.csv(reste_GSEA, file = "reste_MR_v_MC_GSEA.csv")
write.csv(cd4_GSEA, file = "cd4_MR_v_MC_GSEA.csv")

```

```{r Volcano Plots}
#For GSEA and volcano plots
shrink_reste = lfcShrink(dds_reste, contrast = c("group", "MC", "MR"), type = "ashr", res = res_reste )
shrink_cd4   = lfcShrink(dds_cd4, contrast = c("group", "MC", "MR"), type = "ashr", res = res_cd4 )

shrink_reste$entrez = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=rownames(shrink_reste), column="ENTREZID", keytype="ENSEMBL", multiVals="first")))
shrink_cd4$entrez = unname(unlist(AnnotationDbi::mapIds(org.Mm.eg.db, keys=rownames(shrink_cd4), column="ENTREZID", keytype="ENSEMBL", multiVals="first")))

```


